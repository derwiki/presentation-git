<!doctype html>
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %title Using git effectively | Adam Derewecki
    %meta{:content => "Adam Derewecki", :name => "author"}/
    %link{:href => "http://fonts.googleapis.com/css?family=Montserrat:400,700", :rel => "stylesheet", :type => "text/css"}/
    %link{:href => "reveal/css/reset.css", :rel => "stylesheet"}/
    %link{:href => "reveal/css/main.css", :rel => "stylesheet"}/
    %link{:href => "highlight/src/styles/solarized_dark.css", :rel => "stylesheet"}/
    %link{:href => "presentation.css", :rel => "stylesheet"}/
  %body#presentation
    .reveal
      .slides

        %section
          %h2
            Using
            %span.ms git
            effectively
          %h4
            .live
              Live:
              %a{ href: 'is.gd/derwiki_git' }
                is.gd/derwiki_git
            .source
              Source:
              %a{ href: '//github.com/derwiki/presentation-git' }
                github.com/derwiki/presentation-git
          %br
          %h5 presented by
          %h4 @derwiki
          %h4
          %h4 for AdRoll, March 31, 2015

        %section
          %h3
            What is
            %span.ms git?
          %ul
            %li.fragment
              Version control system like SVN, CVS, RCS, mercurial, etc
            %li.fragment
              File systems keep track of directories, files, and contents
            %li.fragment
              File systems only care about the current state
            %li.fragment
              Installing
              %span.ms git
              to part of a filesystem and creating "savepoints"
              (commits) allows you to easily navigate between different states
              the filesystem has been in

        %section
          %h3 Controlling git
          %ul
            %li.fragment
              There are only 156 commands (
              %span.ms git help --all
              \)
              
            %li.fragment
              .git-col
                %p add
                %p add--interactive
                %p am
                %p annotate
                %p apply
                %p archimport
                %p archive
                %p bisect
                %p bisect--helper
                %p blame
                %p branch
                %p bundle
                %p cat-file
                %p check-attr
                %p check-ignore
                %p check-mailmap
                %p check-ref-format
                %p checkout
                %p checkout-index
                %p cherry
                %p cherry-pick
                %p citool
                %p clean
                %p clone
                %p column
                %p commit
                %p commit-tree
                %p config
                %p count-objects
                %p credential
                %p credential-cache
                %p credential-cache--daemon
                %p credential-osxkeychain
                %p credential-store
                %p cvsexportcommit
                %p cvsimport
                %p cvsserver
                %p daemon
                %p describe
                %p diff
                %p diff-files
                %p diff-index
                %p diff-tree
                %p difftool
                %p difftool--helper
                %p fast-export
                %p fast-import
                %p fetch
                %p fetch-pack
                %p filter-branch
                %p fmt-merge-msg
                %p for-each-ref
                %p format-patch
                %p fsck
                %p fsck-objects
                %p gc
                %p get-tar-commit-id
                %p grep
                %p gui
                %p gui--askpass
                %p hash-object
                %p help
                %p http-backend
                %p http-fetch
                %p http-push
                %p imap-send
                %p index-pack
                %p init
                %p init-db
                %p instaweb
                %p log
                %p ls-files
                %p ls-remote
                %p ls-tree
                %p mailinfo
                %p mailsplit
                %p merge
                %p merge-base
                %p merge-file
                %p merge-index
                %p merge-octopus
                %p merge-one-file
                %p merge-ours
                %p merge-recursive
                %p merge-resolve
                %p merge-subtree
                %p merge-tree
                %p mergetool
                %p mktag
                %p mktree
                %p mv
                %p name-rev
                %p notes
                %p p4
                %p pack-objects
                %p pack-redundant
                %p pack-refs
                %p patch-id
                %p prune
                %p prune-packed
                %p pull
                %p push
                %p quiltimport
                %p read-tree
                %p rebase
                %p receive-pack
                %p reflog
                %p relink
                %p remote
                %p remote-ext
                %p remote-fd
                %p remote-ftp
                %p remote-ftps
                %p remote-http
                %p remote-https
                %p remote-testsvn
                %p repack
                %p replace
                %p request-pull
                %p rerere
                %p reset
                %p rev-list
                %p rev-parse
                %p revert
                %p rm
                %p send-email
                %p send-pack
                %p sh-i18n--envsubst
                %p shell
                %p shortlog
                %p show
                %p show-branch
                %p show-index
                %p show-ref
                %p stage
                %p stash
                %p status
                %p stripspace
                %p submodule
                %p subtree
                %p svn
                %p symbolic-ref
                %p tag
                %p unpack-file
                %p unpack-objects
                %p update-index
                %p update-ref
                %p update-server-info
                %p upload-archive
                %p upload-pack
                %p var
                %p verify-pack
                %p verify-tag
                %p web--browse
                %p whatchanged
                %p write-tree

            %li.fragment
              We're going to cover them
              %b all
            %li.fragment
              \~20 seconds per command, so let's dive in

        %section.text-center
          %img{ src: 'assets/trollface.png', style: 'height: 400px; align: center;' }
          %div jk/lol

        %section
          %h3 Installing git to a directory
          %ul
            %li.fragment
              .ms git init
            %li.fragment
              Creates a
              %span.ms .git
              directory in your directory alongside everything else that was
              there
            %li.fragment
              %span.ms .git
              contains: the object model, database of the object model, and
              other project configurations

        %section
          %h3.ms $ tree .git/
          %code
            %pre
              = preserve do
                \.git
                ├── COMMIT_EDITMSG
                ├── HEAD
                ├── config
                ├── description
                ├── hooks
                │   ├── pre-commit
                ├── index
                ├── info
                │   └── exclude
                ├── logs
                │   ├── HEAD
                │   └── refs
                │       └── heads
                │           ├── adam-style-index
                │           └── master
                ├── objects
                │   ├── 01
                │   │   └── ef3e6630af133b41bd954e220f31231aa281d9

        %section
          %h3 Objects: blobs and trees
          %ul
            %li.fragment
              %b blob:
              contents of a file
            %li.fragment
              %b tree:
              record of a directory in a specific state
            %li.fragment
              i.e. list of blobs and trees in the current tree
          .fragment
            %code
              %pre
                = preserve do
                  $ git ls-tree HEAD
                  100644 blob 050c9d95c7e2ec43e92b19e6719ab522f580a2a8  .gitignore
                  100644 blob 45e30c639e2eb1c93ee7ca8eb89b120dc6d46391  Gemfile
                  100644 blob 6136bceb0bbe82b4f5786e003c1e6e5a9fa9d976  Gemfile.lock
                  100644 blob dd4e97e22e159a585b20e21028f964827d5afa4e  README.rdoc
                  100644 blob ba6b733dd2358d858f00445ebd91c214f0f5d2e5  Rakefile
                  040000 tree 9149e8d1f244078f92a48197be0ea0e89feb1df3  app
                  040000 tree 19b9d6c8a39c3ecc9e985b34af88ab219e07df75  bin
                  100644 blob bd83b25412305f93fdb0a892aded30e5178899ba  config.ru
                  040000 tree 395350c15f688e10ef8115eaf609fcfafcf51bea  config
                  040000 tree 602980f52d9fe985bf9f9ec25c77513b51a42d52  db
                  040000 tree 07d89d0b7e50929dea0dcf7e7354358c1133be86  lib
                  040000 tree 29a422c19251aeaeb907175e9b3219a9bed6c616  log
                  040000 tree 23a3236904020a96c2a827875e3e065213747cda  public
                  040000 tree 03fb84ec8cc53685767345fd32d53af59762c622  test
                  040000 tree 8084e8e04d510cc28321f30a9646477cc50c235c  vendor

        %section
          %h3.ms git show 050c9d95
          %code
            %pre
              = preserve do
                $ git show 050c9d95 # the SHA1 of .gitignore's blob
                \# See https://help.github.com/articles/ignoring-files for more
                \#
                \# If you find yourself ignoring temporary files generated by
                \# or operating system, you probably want to add a global ignore
                \#   git config --global core.excludesfile '~/.gitignore_global'
                \# Ignore bundler config.
                \/.bundle
                \# Ignore the default SQLite database.
                \/db/*.sqlite3
                \/db/*.sqlite3-journal
                \# Ignore all logfiles and tempfiles.
                \/log/*
                \!/log/.keep
                \/tmp

        %section
          %h3 Objects: commits
          %ul
            %li.fragment
              %b commit:
              attached to a tree (which is a snapshot of a directory in its
              current state)
            %li.fragment
              Contains metadata: author, when the tree was modified, commit
              message, etc
            %li.fragment
              %b Only
              contains information about the current commit
            %li.fragment
              i.e. how the tree differs from the tree of the most recent commit
            %li.fragment
              Commits contain references to their
              %b parents commit(s)
            %li.fragment
              You can traverse up parent commits if you need information prior
              to the current commit
              
        %section
          %h3 Object relationships
          %img{ src: 'assets/commit-tree-blob.jpg' }

        %section
          %h3 Family tree
          %img{ src: 'assets/git-ancestry.jpg' }

        %section
          %h3 Raw commit
          %code
            %pre
              = preserve do
                $ git show --format=raw
                commit 67ee28dcc27ee5ab59061ae47a0b81dd19888274
                %b tree e7dd337b5f247393f9f23e03eef3a176eb32e1a1
                %b parent 78e5e7abdb69d32f886e950b3329fdc0c249f6dd
                author Adam Derewecki <derewecki@gmail.com> 1427591530 -0700
                committer Adam Derewecki <derewecki@gmail.com> 1427591530 -0700

                \    Initial db/schema.rb
                %br
                diff --git a/db/schema.rb b/db/schema.rb
                new file mode 100644
                index 0000000..9affc04
                \--- /dev/null
                \+++ b/db/schema.rb
                \@@ -0,0 +1,24 @@
                \+# encoding: UTF-8
                \+# This file is auto-generated from the current state of the
                \+# of editing this file, please use the migrations feature of
                \+# incrementally modify your database, and then regenerate

        %section
          %h3 SHA-1 hashes
          %ul
            %li.fragment
              Hashing algorithm used to identify all objects
            %li.fragment
              blob: changing the file contents changes SHA-1
            %li.fragment
              tree: adding/removing a subtree, changing a blob changes SHA-1
            %li.fragment
              commit: changing blob, tree, or commit metadata changes SHA-1

        %section
          %h3 Raw commit
          %code
            %pre{ style: 'font-size: 14px;' }
              = preserve do
                \$ git show --format=raw | head -n 7
                %br
                commit 67ee28dcc27ee5ab59061ae47a0b81dd19888274
                tree e7dd337b5f247393f9f23e03eef3a176eb32e1a1
                parent 78e5e7abdb69d32f886e950b3329fdc0c249f6dd
                author Adam Derewecki <derewecki@gmail.com> 1427591530 -0700
                committer Adam Derewecki <derewecki@gmail.com> 1427591530 -0700
                \    Initial db/schema.rb
                %br
                \$ git commit --amend -m "Initial db/schema.rb (revised)"
                %br
                \[adam/style-index b7eabfc] Initial db/schema.rb (revised)
                \ Date: Sat Mar 28 18:12:10 2015 -0700
                \ 1 file changed, 24 insertions(+)
                \ create mode 100644 db/schema.rb
                %br
                \$ git show --format=raw | head -n 7
                %br
                commit b7eabfc8b46f259eee072cb6c79595452b72331b
                tree e7dd337b5f247393f9f23e03eef3a176eb32e1a1
                parent 78e5e7abdb69d32f886e950b3329fdc0c249f6dd
                author Adam Derewecki <derewecki@gmail.com> 1427591530 -0700
                committer Adam Derewecki <derewecki@gmail.com> 1427610295 -0700
                \    Initial db/schema.rb (revised)

        %section
          %h3
            %span.ms HEAD
            pointer
          %ul
            %li.fragment
              HEAD: pointer to the currently checked out commit
            %li.fragment
              i.e. the head of the current branch
            %li.fragment
              HEAD^: the parent of HEAD
            %li.fragment
              HEAD~2: the grandparent of HEAD
            %li.fragment
              %code
                %pre
                  = preserve do
                    \$ cat .git/HEAD
                    ref: refs/heads/master
                    \$ cat .git/refs/heads/master
                    67ee28dcc27ee5ab59061ae47a0b81dd19888274
                    \$ git rev-parse HEAD
                    67ee28dcc27ee5ab59061ae47a0b81dd19888274

        %section
          %h3 Branch pointers
          %ul( style="width: 100%" )
            %li.fragment
              %code
                %pre
                  = preserve do
                    \$ git branch -v
                    \  adam/style-index ddf0c20 Add styling to tweet#index
                    \  grant/style-new  28bbd41 Convert tweet#new, tweet#form
                    \* master           67ee28d Initial db/schema.rb
            %li.fragment
              %code
                %pre
                  = preserve do
                    \$ tree .git/refs/heads/
                    \.git/refs/heads/
                    \├── adam
                    \│   └── style-index
                    \├── grant
                    \│   └── style-new
                    \└── master
                    \$ cat .git/refs/heads/master
                    2c75ffc1b6c0f5e4a8265bac78ba0640e236cc86
            %li.fragment
              %span.ms git checkout -b $newbranch
            %li.fragment
              Creates branch
              %span.ms $newbranch
              from current HEAD

        %section
          %h3 Fast-forwards
          %ul
            %li.fragment
              e.g. your local
              %span.ms master
              is 5 commits behind
              %span.ms origin/master
            %li.fragment
              %img{ src: 'assets/fast-forward.jpg' }
            %li.fragment
              To update your local
              %span.ms master,
              you can fast-forward to
              %span.ms origin/master
            %li.fragment
              %span.ms git pull --ff-only [origin [master]]

        %section
          %h3
            Moving backwards with
            %span.ms reset
          %ul
            %li.fragment
              e.g. moving backwards two commits
            %li.fragment
              %img{ src: 'assets/reset-backwards.jpg' }
            %li.fragment
              %span.ms git reset master^^
            %li.fragment
              %b Only
              changes HEAD
            %li.fragment
              The changes contained in commits 'a' and 'b' are now un-staged
              changes

        %section
          %h3.ms git reset HEAD^^
          %code
            %pre
              = preserve do
                $ git status
                On branch master
                nothing to commit, working directory clean
                %br
                $ git log --oneline
                67ee28d (HEAD, master) Initial db/schema.rb
                78e5e7a Add scaffolding for Tweet
                2328d04 Add bootstrap, haml, remove spring
                9ba1482 rails new TwitterClone
                %br

                $ git reset HEAD^^
                Unstaged changes after reset:
                M config/routes.rb
                %br

                $ git log --oneline
                2328d04 (HEAD, master) Add bootstrap, haml, remove spring
                9ba1482 rails new TwitterClone
                %br

                $ git status
                On branch master
                Changes not staged for commit:
                \  (use "git add <file>..." to update what will be committed)
                \  (use "git checkout -- <file>..." to discard changes in working directory)

                \        modified:   config/routes.rb

                %br
                Untracked files:
                \  (use "git add <file>..." to include in what will be committed)

                \        app/assets/stylesheets/tweets.scss
                \        app/controllers/tweets_controller.rb
                \        app/models/tweet.rb
                \        app/views/tweets/
                \        db/migrate/
                \        db/schema.rb

        %section
          %h3.ms git reset --hard
          %ul
            %li.fragment
              Moves HEAD
              %b and
              discards changes, instead of leaving them in working tree
            %li.fragment
              %code
                %pre
                  = preserve do
                    $ git log --oneline
                    bc9f9f5 (HEAD, master) Remove comments from Gemfile
                    6c8cd70 Add bootstrap to and scss'ed application.scss
                    67ee28d Initial db/schema.rb
                    78e5e7a Add scaffolding for Tweet
                    2328d04 Add bootstrap, haml, remove spring
                    9ba1482 rails new TwitterClone
                    %br
                    $ git reset --hard HEAD^^
                    HEAD is now at 67ee28d Initial db/schema.rb
                    %br
                    $ git log --oneline
                    67ee28d (HEAD, master) Initial db/schema.rb
                    78e5e7a Add scaffolding for Tweet
                    2328d04 Add bootstrap, haml, remove spring
                    9ba1482 rails new TwitterClone
                    %br
                    $ git status
                    On branch master
                    nothing to commit, working directory clean

        %section
          %h3.ms git reset --hard
          %ul
            %li.fragment
              Can be used to reset to any arbitrary commit
            %li.fragment
              Reliable way to set any branch to origin's master
            %li.fragment
              %code
                %pre
                  = preserve do
                    $ git fetch origin
                    Fetching repository, done.
                    %br
                    $ git reset --hard origin/master
                    HEAD is now at 67ee28d Initial db/schema.rb
            %li.fragment
              %span.ms git reset --hard SHA1
              is equivalent to
              %span.ms git reset SHA1 ; git clean -xdf

        %section
          %h3 Working tree
          %ul
            %li.fragment
              Tree object that represents the current state of the filesystem
            %li.fragment
              If there are no changes from the most recent commit, the working
              tree is the same as the commit's tree
            %li.fragment
              %span.ms git diff
              to view differences between the most recent commit's tree and
              the working tree
            %li.fragment
              %code
                %pre
                  = preserve do
                    \$ git diff
                    diff --git a/Gemfile b/Gemfile
                    index 45e30c6..c20f939 100644
                    \--- a/Gemfile
                    \+++ b/Gemfile
                    \@@ -1,47 +1,22 @@
                    \ source 'https://rubygems.org'

                    \-
                    \-# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
                    \ gem 'rails', '4.2.0'
                    \-# Use sqlite3 as the database for Active Record
                    \ gem 'sqlite3'
                    \-# Use SCSS for stylesheets
                    \ gem 'sass-rails', '~> 5.0'
                    \-# Use Uglifier as compressor for JavaScript assets
                    \ gem 'uglifier', '>= 1.3.0'
                    \-# Use CoffeeScript for .coffee assets and views
                    \ gem 'coffee-rails', '~> 4.1.0'
                    \-# See https://github.com/sstephenson/execjs#readme for more supported runtimes
                    \-# gem 'therubyracer', platforms: :ruby
                    \ group :production do
                    \   gem 'pg'
                    \ end

        %section
          %h3 Index / staging area
          %ul
            %li.fragment
              Work tree: the tree of in progress changes that are currently
              ahead of the most recent commit
            %li.fragment
              Index: a "staging area" between the work tree and the most
              recent commit
            %li.fragment
              Used to prepare the next commit
            %li.fragment
              Stage entire file/directory:
            %li.fragment
              %span.ms git add foo/ bar.py

        %section
          %h3.ms git add --patch
          %code
            %pre
              = preserve do
                \$ git add --patch
                diff --git a/app/assets/stylesheets/application.scss b/app/assets/stylesheets/application.scss
                index f9cd5b3..298db72 100644
                \--- a/app/assets/stylesheets/application.scss
                \+++ b/app/assets/stylesheets/application.scss
                \@@ -13,3 +13,4 @@
                \  *= require_tree .
                \  *= require_self
                \  */
                +@import "bootstrap";
                %br
                Stage this hunk [y,n,q,a,d,/,e,?]? ?
                y - stage this hunk
                n - do not stage this hunk
                q - quit; do not stage this hunk or any of the remaining ones
                a - stage this hunk and all later hunks in the file
                d - do not stage this hunk or any of the later hunks in the file
                g - select a hunk to go to
                \/ - search for a hunk matching the given regex
                j - leave this hunk undecided, see next undecided hunk
                J - leave this hunk undecided, see next hunk
                k - leave this hunk undecided, see previous undecided hunk
                K - leave this hunk undecided, see previous hunk
                s - split the current hunk into smaller hunks
                e - manually edit the current hunk
                ? - print help
                @@ -13,3 +13,4 @@
                \  *= require_tree .
                \  *= require_self
                \  */
                +@import "bootstrap";

        %section
          %h3 Inspecting the index
          %code
            %pre
              = preserve do
                $ git status
                On branch master
                Changes to be committed:
                \  (use "git reset HEAD <file>..." to unstage)

                \        renamed:    app/assets/stylesheets/application.css -> app/assets/stylesheets/application.scss

                Untracked files:
                \  (use "git add <file>..." to include in what will be committed)

                \        untracked-file
                %br
                \$ git diff --cached
                diff --git a/app/assets/stylesheets/application.css b/app/assets/stylesheets/application.css
                deleted file mode 100644
                index f9cd5b3..0000000
                \--- a/app/assets/stylesheets/application.css
                \+++ /dev/null
                \@@ -1,15 +0,0 @@
                diff --git a/app/assets/stylesheets/application.scss b/app/assets/stylesheets/application.scss
                new file mode 100644
                index 0000000..298db72
                \--- /dev/null
                \+++ b/app/assets/stylesheets/application.scss
                \@@ -0,0 +1,16 @@
                \+@import "bootstrap";

        %section
          %h3 Creating a commit
          %ul
            %li.fragment
              Stage files and hunks with
              %span.ms git add
              and
              %span.ms git add --patch
            %li.fragment
              %span.ms git commit -m "My commit message"
            %li.fragment
              Open your editor and include the comments of the commit's tree:
            %li.fragment
              %span.ms git commit -v

        %section
          %h3.ms git commit -v
          %code
            %pre
              = preserve do
                Remove comments from Gemfile
                \# Please enter the commit message for your changes. Lines starting
                \# with '#' will be ignored, and an empty message aborts the commit.
                \# On branch master
                \# Changes to be committed:
                \# modified:   Gemfile
                \#
                \# ------------------------ >8 ------------------------
                \# Do not touch the line above.
                \# Everything below will be removed.
                diff --git a/Gemfile b/Gemfile
                index 45e30c6..c20f939 100644
                \--- a/Gemfile
                \+++ b/Gemfile
                \@@ -1,47 +1,22 @@
                \ source 'https://rubygems.org'

                \-
                \-# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'
                \ gem 'rails', '4.2.0'
                \-# Use sqlite3 as the database for Active Record
                \ gem 'sqlite3'
                \-# Use SCSS for stylesheets
                \ gem 'sass-rails', '~> 5.0'
                \-# Use Uglifier as compressor for JavaScript assets
                \ gem 'uglifier', '>= 1.3.0'
                \-# Use CoffeeScript for .coffee assets and views
                \ gem 'coffee-rails', '~> 4.1.0'
                \-# See https://github.com/sstephenson/execjs#readme for more supported runtimes
                \-# gem 'therubyracer', platforms: :ruby
                \ group :production do
                \   gem 'pg'
                \ end

        %section
          %h3.ms git rebase --interactive
          %ul
            %li.fragment
              Re-write history: reorder commits, edit commits in the past, remove commits
            %li.fragment
              Any time you change a commit, you change its SHA-1
            %li.fragment
              Which means its children need to be re-written to point to the new SHA-1
            %li.fragment
              Invoked with a base commit-ish to work from, presents a list of all
              commits more recent than the base commit

        %section
          %h3.ms git rebase --interactive
          %code
            %pre
              = preserve do
                \$ git log --oneline
                \* bc9f9f5 (HEAD, master) Remove comments from Gemfile
                \* 6c8cd70 Add bootstrap to and scss'ed application.scss
                \* 67ee28d Initial db/schema.rb
                \* 78e5e7a Add scaffolding for Tweet
                \* 2328d04 Add bootstrap, haml, remove spring
                \* 9ba1482 rails new TwitterClone
                %br
                \$ git rebase -i 2328d04
                \# before
                pick 78e5e7a Add scaffolding for Tweet
                pick 67ee28d Initial db/schema.rb
                pick 6c8cd70 Add bootstrap to and scss'ed application.scss
                pick bc9f9f5 Remove comments from Gemfile
                %br
                \# after
                pick 78e5e7a Add scaffolding for Tweet
                fixup 67ee28d Initial db/schema.rb
                pick bc9f9f5 Remove comments from Gemfile
                pick 6c8cd70 Add bootstrap to and scss'ed application.scss
                %br
                \# Rebase 2328d04..bc9f9f5 onto 2328d04
                \#
                \# Commands:
                \#  p, pick = use commit
                \#  r, reword = use commit, but edit the commit message
                \#  e, edit = use commit, but stop for amending
                \#  s, squash = use commit, but meld into previous commit
                \#  f, fixup = like "squash", but discard this commit's log message
                \#  x, exec = run command (the rest of the line) using shell
                \#
                \# These lines can be re-ordered; they are executed from top to bottom.
                \# If you remove a line here THAT COMMIT WILL BE LOST.
                \# However, if you remove everything, the rebase will be aborted.
                \# Note that empty commits are commented out

        %section
          %h3.ms git rebase --interactive
          %ul
            %li.fragment
              %code
                %pre
                  = preserve do
                    \# before
                    \$ git log --oneline
                    bc9f9f5 (HEAD, master) Remove comments from Gemfile
                    6c8cd70 Add bootstrap to and scss'ed application.scss
                    67ee28d Initial db/schema.rb
                    78e5e7a Add scaffolding for Tweet
                    2328d04 Add bootstrap, haml, remove spring
                    9ba1482 rails new TwitterClone
                    %br
                    \# after
                    \$ git log --oneline
                    61b6221 (HEAD, master) Add bootstrap to and scss'ed application.scss
                    74788ff Remove comments from Gemfile
                    acb9b7f Add scaffolding for Tweet
                    2328d04 Add bootstrap, haml, remove spring
                    9ba1482 rails new TwitterClone
            %li.fragment
              After saving/quitting from
              %span.ms git rebase -i,
              the SHA-1 of "Add scaffolding for Tweet" and every child of that
              has been updated

        %section
          %h3 When and when not to re-write history
          %ul
            %li.fragment
              Do: use it to organize your commits in your local branch
            %li.fragment
              Don't: re-write history of a public branch
            %li.fragment
              Especially don't: re-write history of
              %span.ms master
            %li.fragment
              Although do: re-write
              %span.ms master
              if you need to remove confidential information from the repo

        %section
          %h3 Where did the commits go?
          %ul
            %li.fragment
              After re-writing history with
              %span.ms git rebase -i,
              our code changes now have different SHA-1s
            %li.fragment
              "Old" commits are still in the object model
              %span.ms (.git/objects)
            %li.fragment
              Unless referenced in another branch, considered a "dangling commit"
            %li.fragment
              Enumerate dangling objects
              %code
                %pre
                  = preserve do
                    $ git fsck --full
                    Checking object directories: 100% (256/256), done.
                    dangling commit 1697714d585a6273efc98042eb3041c272d83377
                    dangling blob a84806f040fbaad43f7bb5bc506b6a32575abe89
            %li.fragment
              Stays in object model until you run:
              %code
                %pre
                  = preserve do
                    git reflog expire --expire=now --all
                    git gc --prune=now

        %section
          %h3.ms git reflog
          %ul
            %li.fragment
              Mechanism to record when the tip of branches are updated
            %li.fragment
              %code
                %pre
                  = preserve do
                    $ git reflog
                    bc9f9f5 (HEAD, master) HEAD@{0}: reset: moving to bc9f9f5
                    acb9b7f HEAD@{1}: reset: moving to HEAD^^
                    61b6221 HEAD@{2}: rebase -i (finish): returning to refs/heads/master
                    61b6221 HEAD@{3}: rebase -i (pick): Add bootstrap to and scss'ed application.scss
                    74788ff HEAD@{4}: rebase -i (pick): Remove comments from Gemfile
                    acb9b7f HEAD@{5}: rebase -i (fixup): Add scaffolding for Tweet
                    78e5e7a HEAD@{6}: rebase -i (start): checkout 2328d04
                    bc9f9f5 (HEAD, master) HEAD@{7}: commit: Remove comments from Gemfile
                    6c8cd70 HEAD@{8}: reset: moving to 6c8cd70
                    67ee28d HEAD@{9}: reset: moving to HEAD^
                    6c8cd70 HEAD@{10}: commit: Add bootstrap to and scss'ed application.scss
                    67ee28d HEAD@{11}: reset: moving to 67ee28d
                    2328d04 HEAD@{12}: reset: moving to HEAD^^
                    67ee28d HEAD@{13}: checkout: moving from grant/style-new to master
                    28bbd41 (grant/style-new) HEAD@{14}: commit: Convert tweet#new, tweet#form to Bootstrap
                    67ee28d HEAD@{15}: checkout: moving from master to grant/style-new
                    67ee28d HEAD@{16}: checkout: moving from adam/style-index to master
                    ddf0c20 (adam/style-index) HEAD@{17}: commit: Add styling to tweet#index
                    67ee28d HEAD@{18}: reset: moving to master
                    b7eabfc HEAD@{19}: commit (amend): Initial db/schema.rb (revised)
                    67ee28d HEAD@{20}: checkout: moving from master to adam/style-index
                    67ee28d HEAD@{21}: commit: Initial db/schema.rb
                    78e5e7a HEAD@{22}: commit: Add scaffolding for Tweet
                    2328d04 HEAD@{23}: commit: Add bootstrap, haml, remove spring
                    9ba1482 HEAD@{24}: commit (initial): rails new TwitterClone

        %section
          %h3 Dealing with merge conflicts
          %ul
            %li.fragment
              Two branches from master each with one commit
              %img{ src: 'assets/merge-conflict-1.jpg' }
            %li.fragment
              To merge
              %span.ms a,
              master is simply fast-forwarded to
              %span.ms a
              %img{ src: 'assets/merge-conflict-2.jpg' }
            %li.fragment.ms
              git checkout master ; git merge --ff-only a

        %section
          %h3 Dealing with merge conflicts
          %ul
            %li.fragment
              This works because the parent of
              %span.ms a
              is the same in the branch and master
            %li.fragment
              What about
              %span.ms b?
              %img{ src: 'assets/merge-conflict-3.jpg' }
            %li.fragment
              %span.ms b's
              parent was the old head of
              %span.ms master,
              but now we need
              %span.ms b's
              parent to be the new head of
              %span.ms master,
              which is
              %span.ms a
            %li.fragment
              Two solutions: merge commit or rebase

        %section
          %h3 Merge commits
          %ul
            %li.fragment
              %span.ms git checkout master ; git merge -no-ff b
            %li.fragment
              Because
              %span.ms a
              was merged into
              %span.ms master, master
              is no longer a direct ancestor of
              %span.ms b
              (like it was when the branch was created)
            %li.fragment
              git performs a 3-way merge, using the closest common ancestor
              and the two trees associated
              %span.ms master
              and
              %span.ms b
            %li.fragment
              The resulting
              %span.ms merge commit
              has two parents:
              %span.ms a
              and
              %span.ms b

        %section
          %h3 Merge commits
          %code
            %pre
              = preserve do
                \$ git branch -v
                \  adam/style-index ddf0c20 Add styling to tweet#index
                \* master           bc9f9f5 Remove comments from Gemfile
                %br
                \$ git log --oneline
                bc9f9f5 (HEAD, master) Remove comments from Gemfile
                6c8cd70 Add bootstrap to and scss'ed application.scss
                67ee28d Initial db/schema.rb
                78e5e7a Add scaffolding for Tweet
                2328d04 Add bootstrap, haml, remove spring
                9ba1482 rails new TwitterClone
                %br
                \$ git log --oneline adam/style-index
                ddf0c20 (adam/style-index) Add styling to tweet#index
                67ee28d Initial db/schema.rb
                78e5e7a Add scaffolding for Tweet
                2328d04 Add bootstrap, haml, remove spring
                9ba1482 rails new TwitterClone
                %br
                \$ git merge --no-ff adam/style-index
                Merge made by the 'recursive' strategy.
                \ app/views/tweets/index.html.haml | 32 +++++++++++---------------------
                \ 1 file changed, 11 insertions(+), 21 deletions(-)
                %br
                \$ git show --format=raw
                commit d9010f8f6f9e82360089a28d7402f94c4c969c4b
                tree b33431aa9e4bf5e7c28dc40ea81565fb69c8b245
                %b parent bc9f9f554e8491fe1c71de0ae21d1d194314f611
                %b parent ddf0c201a8d3c584d87a519b10348baaf325b131
                author Adam Derewecki <derewecki@gmail.com> 1427692665 -0700
                committer Adam Derewecki <derewecki@gmail.com> 1427692665 -0700
                %br
                \    Merge branch 'adam/style-index'

        %section
          %h3 Merge commits
          %code
            %pre
              = preserve do
                \$ git log --oneline --graph
                \*   d9010f8 (HEAD, master) Merge branch 'adam/style-index'
                \|\
                \| * ddf0c20 (adam/style-index) Add styling to tweet#index
                \* | bc9f9f5 Remove comments from Gemfile
                \* | 6c8cd70 Add bootstrap to and scss'ed application.scss
                \|/
                \* 67ee28d Initial db/schema.rb
                \* 78e5e7a Add scaffolding for Tweet
                \* 2328d04 Add bootstrap, haml, remove spring
                \* 9ba1482 rails new TwitterClone
          %ul
            %li.fragment
              Two commits in the left branch (master)
            %li.fragment
              One commit in the right branch (topic branch adam/style-index)
            %li.fragment
              %span.ms d9010f8
              is the
              %span.ms merge commit
              that 'ties' the two branches together


        %section
          %h3 Rebasing
          %ul
            %li.fragment
              Merge commits are non-destructive; they don't re-write history
            %li.fragment
              Rebasing forward-ports local commits to the updated upstream head
            %li.fragment
              Rebasing is destructive; all the commits you forward port will
              change their parent references, which will in turn change their
              SHA1s
            %li.fragment
              Think of rebasing as "replaying" your changes on the target branch
            %li.fragment
              %img{ src: 'assets/merge-conflict-4-rebase.jpg' }

        %section
          %h3 Rebasing
          %code
            %pre
              = preserve do
                \$ git branch -v
                \  adam/style-index ddf0c20 Add styling to tweet#index
                \  grant/style-new  28bbd41 Convert tweet#new, tweet#form to Bootstrap
                \* master           bc9f9f5 Remove comments from Gemfile
                %br
                \$ git checkout adam/style-index
                \Switched to branch 'adam/style-index'
                %br
                \$ git log --oneline
                ddf0c20 (HEAD, adam/style-index) Add styling to tweet#index
                67ee28d Initial db/schema.rb
                78e5e7a Add scaffolding for Tweet
                2328d04 Add bootstrap, haml, remove spring
                9ba1482 rails new TwitterClone
                %br
                \$ git rebase master
                First, rewinding head to replay your work on top of it...
                Applying: Add styling to tweet#index
                %br
                \$ git log --oneline
                36dd035 (HEAD, adam/style-index) Add styling to tweet#index
                bc9f9f5 (master) Remove comments from Gemfile
                6c8cd70 Add bootstrap to and scss'ed application.scss
                67ee28d Initial db/schema.rb
                78e5e7a Add scaffolding for Tweet
                2328d04 Add bootstrap, haml, remove spring
                9ba1482 rails new TwitterClone

        %section
          %h3.ms git cherry-pick
          %code
            %pre
              = preserve do
                git log --oneline
                ddf0c20 (HEAD, adam/style-index) Add styling to tweet#index
                67ee28d Initial db/schema.rb
                78e5e7a Add scaffolding for Tweet
                2328d04 Add bootstrap, haml, remove spring
                9ba1482 rails new TwitterClone
                %br
                $ git checkout master
                Switched to branch 'master'
                %br
                $ git cherry-pick adam/style-index
                [master 2c75ffc] Add styling to tweet#index
                \ 1 file changed, 15 insertions(+), 25 deletions(-)
                \ rewrite app/views/tweets/index.html.haml (91%)
                %br
                $ git log --oneline
                2c75ffc (HEAD, master) Add styling to tweet#index
                bc9f9f5 Remove comments from Gemfile
                6c8cd70 Add bootstrap to and scss'ed application.scss
                67ee28d Initial db/schema.rb
                78e5e7a Add scaffolding for Tweet
                2328d04 Add bootstrap, haml, remove spring
                9ba1482 rails new TwitterClone

        %section
          %h3 Cherry picking and interactive rebasing
          %ul
            %li.fragment
              With
              %span.ms git rebase -i,
              we saw a list of commits with
              %span.ms pick
              as the default action
            %li.fragment
              You can start an interactive rebase and add
              %i any
              new commits you want as
              %span.ms pick
            %li.fragment
              %span.ms cherry-pick
              is a special-case shortcut for when you only have one commit you
              want to merge in

        %section
          %h3 Rebasing when you're working on a WIP branch
          %ul
            %li.fragment
              Sometimes you need to work on-top of someone's branch that hasn't
              been merged into master
            %li.fragment
              What happens after it merges?
            %li.fragment
              Use
              %span.ms git rebase -i commit-ish
              to
              %span.ms squash
              your commits (ahead of the branch point) into one commit
            %li.fragment
              %span.ms cherry-pick
              your uber-commit into a new branch pointed at
              %span.ms origin/master
            %li.fragment
              Or instead of
              %span.ms squash-
              ing,
              %span.ms rebase -i HEAD^
              and add N
              %span.ms pick SHA1
              lines for N commits you want to rebase on-top of
              %span.ms master

        %section
          %h2 Command summary
          .git-summary-col
            %p
            %p git help --all
            %p git init
            %p git ls-tree HEAD
            %p git show --format=raw
            %p git rev-parse HEAD
            %p git branch -v
            %p git checkout -b $newbranch
            %p git pull --ff-only [origin [master]]
            %p git log --oneline
            %p git log --oneline --graph
            %p git reset HEAD^^
            %p git reset --hard HEAD^^
            %p git fetch origin
            %p git reset --hard origin/master
            %p git clean -xdf
            %p git add --patch
            %p git diff --cached
            %p git commit -v
            %p git rebase -i $commit-ish
            %p git fsck --full
            %p git reflog expire --expire=now --all
            %p git gc --prune=now
            %p git reflog
            %p git merge --ff-only $commit-ish
            %p git merge -no-ff $commit-ish
            %p git cherry-pick $commit-ish
          %ul
            %li.fragment
              Help via
              %span.ms man git-$command,
              e.g.
              %span.ms man git-rebase

        %section
          %h2
            Using
            %span.ms git
            effectively
          %h4
            .live
              Live:
              %a{ href: 'is.gd/derwiki_git' }
                is.gd/derwiki_git
            .source
              Source:
              %a{ href: '//github.com/derwiki/presentation-git' }
                github.com/derwiki/presentation-git
          %br
          %h5 presented by
          %h4 @derwiki
          %h4
          %h4 for AdRoll, March 31, 2015

      /
        required for correct operation of reveal.js,
        even if we don't want controls
      %aside.controls
        %a.left{:href => "#"} &#x25c4;
        %a.right{:href => "#"} &#x25ba;
        %a.up{:href => "#"} &#x25b2;
        %a.down{:href => "#"} &#x25bc;

    %script{:src => "reveal/js/reveal.min.js"}
    %script{:src => "highlight/build/highlight.pack.js"}
    :javascript
      Reveal.initialize({
        controls: false,
        progress: false,
        history: true,
        mouseWheel: false,
        rollingLinks: false,
      });
      hljs.initHighlightingOnLoad();
